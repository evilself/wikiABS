<?xml version="1.0" encoding="UTF-8"?>
<web-app id="wikiABS" version="3.0" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
									xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">         
 
    <display-name>wiki</display-name>
 
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
           classpath:persistence-beans.xml
        </param-value>
    </context-param>
 
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <listener>
        <listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
    </listener>
     
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
 
    <!-- Spring Security Filter -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
 
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
 
    <servlet>
        <servlet-name>wiki</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
       
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <!-- I dont want my dispatcher servlet to handle static resources so add a default mapping here -->
    <!-- 
    <servlet-mapping>
	    <servlet-name>default</servlet-name>
	    <url-pattern>/resources/*</url-pattern>
	</servlet-mapping>
 	 -->
 	 
    <servlet-mapping>
        <servlet-name>wiki</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    
    
    <!-- 
		The most interesting part is usage of sf taglib. To stay Web 1.0 friendly, we unfortunatelly cannot directly use DELETE. Up to HTML4 and XHTML1, html forms can only use GET and POST. 
		Workaround is to use hidden field that marks, if the POST actually should be used as DELETE. That’s precisely what Spring does for us for free – just using sf:form prefix. 
		So we’re tunneling DELETE via HTTP POST, but it will be dispatched correctly.
		To make this work, we must put in our web.xml special Spring’s filter for that
	 -->
    <filter>
	    <filter-name>httpMethodFilter</filter-name>
	    <filter-class>
	        org.springframework.web.filter.HiddenHttpMethodFilter
	    </filter-class>
	</filter>
	 
	<filter-mapping>
	    <filter-name>httpMethodFilter</filter-name>
	    <url-pattern>/*</url-pattern>
	</filter-mapping>
 
</web-app>