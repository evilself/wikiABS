<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

	<!-- we can use annotations . We dont have to use because context component scan below is enabled. This automatically turns on annotation usage-->
    <!-- context:annotation-config /--> 
     
    <!-- package to look for annotated classes -->
    <context:component-scan base-package="com.americanbanksystems.wiki.service.implementation" />
     
    <!-- we will manage transactions with annotations -->
    <tx:annotation-driven />
    
    <bean id="messageSource"
        class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename" value="classpath:messages" />       
    </bean>
 
 	<context:property-placeholder location="classpath:application.properties" />
 
 
    <!-- data source for our database -->
    <bean id="dataSource"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${ds.driverClassName}" />
        <property name="url" value="${ds.url}" />
        <property name="username" value="${ds.username}" />
        <property name="password" value="${ds.password}" />
    </bean>
    
    <!-- The above code is my datasource but managed from my Spring container, below is a ref to my dataSource defined and managed by Tomcat container and ref'ed by JNDI -->
    <!-- jee:jndi-lookup id="dataSource" jndi-name="jdbc/wikiabs" resource-ref="true" ></jee:jndi-lookup-->
    
    <jee:jndi-lookup id="mailSession" jndi-name="mail/wikiABS" resource-ref="true" ></jee:jndi-lookup>
     <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl" p:session-ref="mailSession" />
    
     
     <bean id="entityManagerFactory"
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" p:packagesToScan="com.americanbanksystems.wiki.domain">
        <property name="dataSource" ref="dataSource" /> 
        <!-- BorisM i commendted out the below because we use namespace :p above to specify the packages to scan, instead of one by one -->       
        <!-- property name="annotatedClasses" >
            <list>
            	<value>com.americanbanksystems.wiki.domain.BaseEntity</value>
            	<value>com.americanbanksystems.wiki.domain.UserRole</value>
            	<value>com.americanbanksystems.wiki.domain.User</value>
            	<value>com.americanbanksystems.wiki.domain.Product</value>
                <value>com.americanbanksystems.wiki.domain.Article</value>                
                <value>com.americanbanksystems.wiki.domain.Attachment</value>                                
            </list>
        </property-->
        <property name="persistenceProvider">
            <bean class="org.hibernate.ejb.HibernatePersistence" />
        </property> 
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>  
    </bean>
     
     <bean id="transactionManager"
        class="org.springframework.orm.jpa.JpaTransactionManager">
    	<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
     
     
    <!-- configure hibernate session factory -->
    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" p:packagesToScan="com.americanbanksystems.wiki.domain">
        <property name="dataSource" ref="dataSource" /> 
        <!-- BorisM i commendted out the below because we use namespace :p above to specify the packages to scan, instead of one by one -->       
        <!-- property name="annotatedClasses" >
            <list>
            	<value>com.americanbanksystems.wiki.domain.BaseEntity</value>
            	<value>com.americanbanksystems.wiki.domain.UserRole</value>
            	<value>com.americanbanksystems.wiki.domain.User</value>
            	<value>com.americanbanksystems.wiki.domain.Product</value>
                <value>com.americanbanksystems.wiki.domain.Article</value>                
                <value>com.americanbanksystems.wiki.domain.Attachment</value>                                
            </list>
        </property-->
        <property name="hibernateProperties">
            <props>
                <prop key="dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>  
    </bean>
    
    <bean id="hibernateTransactionManager"
        class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    	<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<bean id="jdbcTemplate"
        class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
    <constructor-arg type="javax.sql.DataSource" ref="dataSource"/>
</bean>

<!-- **************************************SPRING SECURITY CONFIG*********************************************** -->

</beans>
